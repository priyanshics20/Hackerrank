import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'migratoryBirds' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static int migratoryBirds(List<Integer> arr) {
    // Write your code here
        HashMap<Integer, Integer> hs = new HashMap<>();
        int ans=0;
        int max=0;
        for(int i: arr){
            hs.put(i,hs.getOrDefault(i,0)+1);
        }
        for(int i: hs.keySet()){
            if(hs.get(i)>max){
                max = hs.get(i);
                ans = i;
            }
        }
        return ans;
        

        // int[] arr1 = new int[5];
        // int max=0, ans =0;
        
        // for(int i=0;i<arr.size();i++){
        //     if(arr.get(i)==1){
        //         arr1[0]+=1;
        //     }
        //     if(arr.get(i)==2){
        //         arr1[1]+=1;
        //     }
        //     if(arr.get(i)==3){
        //         arr1[2]+=1;
        //     }
        //     if(arr.get(i)==4){
        //         arr1[3]+=1;
        //     }
        //     if(arr.get(i)==5){
        //         arr1[4]+=1;
        //     }
        // }
        // for(int i=0;i<arr1.length;i++){
        //     if(arr1[i]>max){
        //         max=arr1[i];
        //         ans=i+1;
        //     }
        // }
        // return ans;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
